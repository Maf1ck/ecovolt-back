import axios from "axios";
import { config } from "../config/env.js";
import logger from "../utils/logger.js";

class PromService {
  constructor() {
    this.baseURL = "https://my.prom.ua/api/v1";
    this.requestDelay = 300; // –ó–±—ñ–ª—å—à–∏–ª–∏ –∑–∞—Ç—Ä–∏–º–∫—É
    this.maxRetries = 3;
    this.timeout = 30000;
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î HTTP –∫–ª—ñ—î–Ω—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
   */
  createClient() {
    return axios.create({
      baseURL: this.baseURL,
      timeout: this.timeout,
      headers: {
        Authorization: `Bearer ${config.promApiToken}`,
        "X-LANGUAGE": "uk",
      },
    });
  }

  /**
   * –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
   */
  async delay(ms = this.requestDelay) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ exponential backoff
   */
  async retryRequest(requestFn, retries = this.maxRetries) {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        return await requestFn();
      } catch (error) {
        logger.warn(`–°–ø—Ä–æ–±–∞ ${attempt}/${retries} –Ω–µ–≤–¥–∞–ª–∞:`, error.message);
        
        if (attempt === retries) {
          throw error;
        }

        // Exponential backoff: 1s, 2s, 4s
        const backoffTime = Math.pow(2, attempt) * 1000;
        logger.info(`–û—á—ñ–∫—É–≤–∞–Ω–Ω—è ${backoffTime}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...`);
        await this.delay(backoffTime);
      }
    }
  }

  /**
   * –í–ò–ü–†–ê–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –í–°–Ü —Ç–æ–≤–∞—Ä–∏ –∑ Prom.ua API
   * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ–Ω–∞–¥ 100
   */
  async fetchAllProducts(initialLastId = null) {
    logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Prom.ua (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π)");
    const client = this.createClient();
    let allProducts = [];
    let requestCount = 0;
    const limit = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç Prom.ua
    const maxRequests = 1000; // –î–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    let lastId = initialLastId; // <-- –î–æ–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ lastId
    let hasMore = true;

    try {
      while (hasMore && requestCount < maxRequests) {
        requestCount++;
        logger.info(`üìû –ó–∞–ø–∏—Ç #${requestCount} –¥–ª—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤${lastId ? `, last_id: ${lastId}` : ''}`);
        try {
          const response = await this.retryRequest(async () => {
            const params = {
              limit,
              ...(lastId && { last_id: lastId })
            };
            logger.debug(`üì° –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É:`, params);
            return await client.get('/products/list', { params });
          });
          const responseData = response.data;
          const { products, last_id } = responseData;
          logger.info(`‚û°Ô∏è last_id –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${last_id}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: ${products?.length}`);
          if (products && products.length > 0) {
            allProducts.push(...products);
            logger.info(`üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä—ñ–≤. –í—Å—å–æ–≥–æ: ${allProducts.length}`);
            if (!last_id || last_id === lastId) {
              hasMore = false;
            } else {
              lastId = last_id;
              await this.delay();
            }
          } else {
            hasMore = false;
          }
        } catch (error) {
          logger.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤:`, error.message);
          hasMore = false;
        }
      }
      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
      const uniqueProducts = this.removeDuplicates(allProducts);
      if (uniqueProducts.length !== allProducts.length) {
        logger.warn(`‚ö†Ô∏è –í–∏–¥–∞–ª–µ–Ω–æ ${allProducts.length - uniqueProducts.length} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤`);
        logger.info(`‚úÖ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: ${uniqueProducts.length}`);
      }
      logger.info(`üèÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${uniqueProducts.length}`);
      logger.info(`üìä –í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–ø–∏—Ç—ñ–≤: ${requestCount}`);
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ last_id –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É
      const last_id = uniqueProducts.length > 0 ? uniqueProducts[uniqueProducts.length - 1].id : null;
      return { products: uniqueProducts, last_id };
    } catch (error) {
      logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤:", error);
      if (allProducts.length > 0) {
        logger.warn(`‚ö†Ô∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —á–∞—Å—Ç–∫–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏: ${allProducts.length}`);
        const uniqueProducts = this.removeDuplicates(allProducts);
        const last_id = uniqueProducts.length > 0 ? uniqueProducts[uniqueProducts.length - 1].id : null;
        return { products: uniqueProducts, last_id };
      }
      throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏: ${error.message}. –ó–∞–ø–∏—Ç—ñ–≤: ${requestCount}, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${allProducts.length}`);
    }
  }

  /**
   * –í–∏–¥–∞–ª—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ ID
   */
  removeDuplicates(products) {
    const seen = new Set();
    return products.filter(product => {
      if (seen.has(product.id)) {
        return false;
      }
      seen.add(product.id);
      return true;
    });
  }

  /**
   * –í–ò–ü–†–ê–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–æ–≤–∞—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
   */
  async fetchProductsByCategory(groupId) {
    if (!groupId) {
      logger.warn("‚ö†Ô∏è –ù–µ –≤–∫–∞–∑–∞–Ω–æ group_id, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏");
      return await this.fetchAllProducts();
    }

    logger.info(`üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (group_id: ${groupId})`);
    
    const client = this.createClient();
    let categoryProducts = [];
    let lastId = null;
    let hasMore = true;
    let requestCount = 0;
    const limit = 100;
    const maxRequests = 500; // –ú–µ–Ω—à–∏–π –ª—ñ–º—ñ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π

    try {
      while (hasMore && requestCount < maxRequests) {
        requestCount++;
        
        logger.info(`üìû –ó–∞–ø–∏—Ç #${requestCount} –¥–ª—è group_id ${groupId}${lastId ? `, last_id: ${lastId}` : ''}`);

        const response = await this.retryRequest(async () => {
          const params = {
            limit,
            group_id: groupId,
            ...(lastId && { last_id: lastId }),
          };
          
          return await client.get('/products/list', {
            params: params
          });
        });

        const { products, last_id } = response.data;

        if (!products || products.length === 0) {
          logger.info(`‚úÖ –ù–µ–º–∞—î –±—ñ–ª—å—à–µ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ${groupId}`);
          hasMore = false;
          break;
        }

        categoryProducts.push(...products);
        logger.info(`üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –í—Å—å–æ–≥–æ: ${categoryProducts.length}`);

        if (!last_id || last_id === lastId) {
          logger.info(`‚úÖ –î–æ—Å—è–≥–Ω—É—Ç–æ –∫—ñ–Ω–µ—Ü—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ${groupId}`);
          hasMore = false;
        } else {
          lastId = last_id;
          await this.delay();
        }
      }

      logger.info(`üèÅ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è ${groupId} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –¢–æ–≤–∞—Ä—ñ–≤: ${categoryProducts.length}`);
      
      // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
      const uniqueProducts = this.removeDuplicates(categoryProducts);
      return uniqueProducts;

    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ${groupId}:`, error);
      
      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
      const errorDetails = {
        groupId,
        message: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        requestCount,
        productsLoaded: categoryProducts.length
      };
      
      logger.error("üîç –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", errorDetails);
      
      if (categoryProducts.length > 0) {
        logger.warn(`‚ö†Ô∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —á–∞—Å—Ç–∫–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${categoryProducts.length}`);
        return this.removeDuplicates(categoryProducts);
      }
      
      throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ${groupId}: ${error.message}. –ó–∞–ø–∏—Ç—ñ–≤: ${requestCount}, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${categoryProducts.length}`);
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–æ–≤–∞—Ä –∑–∞ ID
   */
  async fetchProductById(productId) {
    logger.info(`üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ID: ${productId}`);
    
    const client = this.createClient();

    try {
      const response = await this.retryRequest(async () => {
        return await client.get(`/products/${productId}`);
      });

      logger.info(`‚úÖ –¢–æ–≤–∞—Ä ${productId} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
      return response.data;

    } catch (error) {
      if (error.response?.status === 404) {
        logger.warn(`‚ö†Ô∏è –¢–æ–≤–∞—Ä ${productId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
        throw new Error("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      }
      
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ${productId}:`, error);
      throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API
   */
  async testConnection() {
    logger.info("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Prom.ua API");
    
    const client = this.createClient();

    try {
      const response = await client.get('/products/list', {
        params: { limit: 1 }
      });

      const { products } = response.data;
      
      logger.info("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ API –ø—Ä–∞—Ü—é—î");
      
      return {
        success: true,
        message: "API –¥–æ—Å—Ç—É–ø–Ω–∏–π",
        sampleProduct: products?.[0] || null,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API:", error);
      
      return {
        success: false,
        message: `API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${error.message}`,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API
   */
  async getAPIStats() {
    logger.info("üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API");
    
    try {
      // –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
      const testResult = await this.testConnection();
      
      if (!testResult.success) {
        throw new Error(testResult.message);
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const client = this.createClient();
      const response = await client.get('/products/list', {
        params: { limit: 10 }
      });

      return {
        apiStatus: "OK",
        timestamp: new Date().toISOString(),
        sampleProducts: response.data.products?.length || 0,
        hasLastId: !!response.data.last_id,
        sampleProduct: response.data.products?.[0] || null
      };

    } catch (error) {
      logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      throw error;
    }
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ singleton
const promService = new PromService();
export default promService;