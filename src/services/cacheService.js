import logger from "../utils/logger.js";

class CacheService {
  constructor() {
    // –ì–æ–ª–æ–≤–Ω–∏–π –∫–µ—à –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    this.cache = {
      products: {
        all: [],
        categories: {},
        lastUpdate: null,
        isUpdating: false,
        updatePromise: null
      }
    };

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–µ—à—É
    this.config = {
      // –ß–∞—Å –∂–∏—Ç—Ç—è –∫–µ—à—É (30 —Ö–≤–∏–ª–∏–Ω)
      TTL: 30 * 60 * 1000,
      // –ß–∞—Å –¥–ª—è retry –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ (5 —Ö–≤–∏–ª–∏–Ω)
      RETRY_DELAY: 5 * 60 * 1000,
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      UPDATE_TIMEOUT: 10 * 60 * 1000
    };

    // –ú–∞–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    this.categoryGroups = {
      'solar-panels': 97668952,
      'inverters': 130134486,
      'fuses': null,
      'ups': null,
      'cables': 130135807,
      'optimizers': 130139474,
      'controllers': null,
      'mounting': 130139468,
      'batteries': 140995307,
      'drone-batteries': null,
      'charging-stations': null,
      'mushrooms': null,
      'boilers': null,
      'air-conditioners': 130300043
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
    setInterval(() => {
      this.scheduleUpdateIfNeeded();
    }, 5 * 60 * 1000);
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–µ—à
   */
  shouldUpdateCache() {
    const { lastUpdate } = this.cache.products;
    
    if (!lastUpdate) {
      return true;
    }
    
    const age = Date.now() - lastUpdate;
    return age > this.config.TTL;
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –≤—ñ–∫ –∫–µ—à—É –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  getCacheAge() {
    const { lastUpdate } = this.cache.products;
    return lastUpdate ? Date.now() - lastUpdate : null;
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å –∫–µ—à—É
   */
  getCacheStatus() {
    const { all, lastUpdate, isUpdating } = this.cache.products;
    const age = this.getCacheAge();
    
    return {
      totalProducts: all.length,
      lastUpdate: lastUpdate ? new Date(lastUpdate).toISOString() : null,
      ageMinutes: age ? Math.round(age / 60000) : null,
      isStale: this.shouldUpdateCache(),
      isUpdating,
      categories: Object.keys(this.cache.products.categories).reduce((acc, key) => {
        acc[key] = this.cache.products.categories[key].length;
        return acc;
      }, {})
    };
  }

  /**
   * –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É—î –ø—Ä–æ–¥—É–∫—Ç–∏ –∑–∞ group_id
   */
  categorizeProducts(products) {
    const categorized = {};
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    Object.keys(this.categoryGroups).forEach(category => {
      categorized[category] = [];
    });

    // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    products.forEach(product => {
      const groupId = product.group?.id;
      
      if (groupId) {
        const categoryEntry = Object.entries(this.categoryGroups).find(
          ([key, id]) => id === groupId
        );
        
        if (categoryEntry) {
          const [categoryKey] = categoryEntry;
          categorized[categoryKey].push(product);
        }
      }
    });

    // –õ–æ–≥—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    const stats = Object.entries(categorized)
      .filter(([, products]) => products.length > 0)
      .map(([category, products]) => `${category}: ${products.length}`)
      .join(', ');
    
    logger.info(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${stats}`);
    
    return categorized;
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –∫–µ—à –Ω–æ–≤–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
   */
  updateCache(products) {
    if (!Array.isArray(products)) {
      logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞: products –º–∞—î –±—É—Ç–∏ –º–∞—Å–∏–≤–æ–º");
      throw new Error("Invalid products data: expected array");
    }
    
    if (products.length === 0) {
      logger.warn("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤");
    }
    
    logger.info(`üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –∑ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏`);
    
    try {
      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏
      const categories = this.categorizeProducts(products);
      
      // –ê—Ç–æ–º–∞—Ä–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É
      this.cache.products = {
        all: products,
        categories,
        lastUpdate: Date.now(),
        isUpdating: false,
        updatePromise: null
      };

      logger.info(`‚úÖ –ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ. –¢–æ–≤–∞—Ä—ñ–≤: ${products.length}`);
      this.logCacheStatus();
      
    } catch (error) {
      logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É:", error);
      throw error;
    }
  }

  /**
   * –ü–æ–∑–Ω–∞—á–∞—î –∫–µ—à —è–∫ —Ç–∞–∫–∏–π, —â–æ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è
   */
  setUpdating(isUpdating, updatePromise = null) {
    this.cache.products.isUpdating = isUpdating;
    this.cache.products.updatePromise = updatePromise;
    
    if (isUpdating) {
      logger.info("‚è≥ –ö–µ—à –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ —Ç–∞–∫–∏–π, —â–æ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è");
    } else {
      logger.info("‚úÖ –ö–µ—à –±—ñ–ª—å—à–µ –Ω–µ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è");
    }
  }

  /**
   * –û—á–∏—â–∞—î –∫–µ—à
   */
  clearCache() {
    logger.warn("üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É");
    
    this.cache.products = {
      all: [],
      categories: {},
      lastUpdate: null,
      isUpdating: false,
      updatePromise: null
    };
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –∫–µ—à—É
   */
  getAllProducts() {
    return [...this.cache.products.all]; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–ø—ñ—é
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –ø—Ä–æ–¥—É–∫—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
   */
  getCategoryProducts(categoryKey) {
    const products = this.cache.products.categories[categoryKey];
    return products ? [...products] : []; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–ø—ñ—é
  }

  /**
   * –®—É–∫–∞—î –ø—Ä–æ–¥—É–∫—Ç –∑–∞ ID –≤ –∫–µ—à—ñ
   */
  findProductById(productId) {
    return this.cache.products.all.find(
      product => product.id.toString() === productId.toString()
    );
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —ñ—Å–Ω—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—è
   */
  categoryExists(categoryKey) {
    return this.categoryGroups.hasOwnProperty(categoryKey);
  }

  /**
   * –û—Ç—Ä–∏–º—É—î group_id –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
   */
  getCategoryGroupId(categoryKey) {
    return this.categoryGroups[categoryKey];
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
   */
  getAvailableCategories() {
    return Object.keys(this.categoryGroups);
  }

  /**
   * –ü–ª–∞–Ω—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
   */
  scheduleUpdateIfNeeded() {
    if (this.shouldUpdateCache() && !this.cache.products.isUpdating) {
      logger.info("‚è∞ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É");
      // –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      // –¶–µ —Ä–æ–±–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    }
  }

  /**
   * –ß–µ–∫–∞—î –ø–æ–∫–∏ –ø–æ—Ç–æ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
   */
  async waitForUpdate(timeout = this.config.UPDATE_TIMEOUT) {
    if (!this.cache.products.isUpdating) {
      return;
    }

    logger.info("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...");
    
    const startTime = Date.now();
    
    while (this.cache.products.isUpdating) {
      if (Date.now() - startTime > timeout) {
        logger.warn("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É");
        break;
      }
      
      // –ß–µ–∫–∞—î–º–æ 100–º—Å –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }

  /**
   * –õ–æ–≥—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∫–µ—à—É
   */
  logCacheStatus() {
    const status = this.getCacheStatus();
    logger.info(`üìä –°—Ç–∞—Ç—É—Å –∫–µ—à—É: ${status.totalProducts} —Ç–æ–≤–∞—Ä—ñ–≤, ` +
               `–æ–Ω–æ–≤–ª–µ–Ω–æ ${status.ageMinutes || 0} —Ö–≤. —Ç–æ–º—É, ` +
               `–∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π: ${status.isStale}, –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è: ${status.isUpdating}`);
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è API
   */
  getDetailedStats() {
    const status = this.getCacheStatus();
    
    return {
      cache: status,
      config: {
        ttlMinutes: this.config.TTL / 60000,
        retryDelayMinutes: this.config.RETRY_DELAY / 60000,
        updateTimeoutMinutes: this.config.UPDATE_TIMEOUT / 60000
      },
      categories: this.categoryGroups
    };
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ singleton
const cacheService = new CacheService();
export default cacheService;