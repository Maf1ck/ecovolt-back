import promService from "../services/promService.js";
import cacheService from "../services/cacheService.js";
import logger from "../utils/logger.js";

/**
 * –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É —É —Ñ–æ–Ω—ñ
 */
const updateCacheInBackground = async () => {
  if (cacheService.cache.products.isUpdating) {
    logger.info("‚è≥ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è");
    return;
  }

  try {
    cacheService.setUpdating(true);
    logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É...");

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑ Prom.ua API
    const products = await promService.fetchAllProducts();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
    cacheService.updateCache(products);
    
    logger.info(`‚úÖ –§–æ–Ω–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: ${products.length} —Ç–æ–≤–∞—Ä—ñ–≤`);

  } catch (error) {
    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É:", error);
    
    // –Ø–∫—â–æ –∫–µ—à –ø–æ—Ä–æ–∂–Ω—ñ–π —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è - —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    if (cacheService.getAllProducts().length === 0) {
      logger.error("üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–º–∞—î –∫–µ—à–æ–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è!");
    }
  } finally {
    cacheService.setUpdating(false);
  }
};

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–µ—à—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
 */
export const initializeCache = async () => {
  logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–µ—à—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤...");
  
  try {
    await updateCacheInBackground();
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –∫–æ–∂–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω
    setInterval(() => {
      if (cacheService.shouldUpdateCache()) {
        logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É");
        updateCacheInBackground();
      }
    }, 15 * 60 * 1000);
    
  } catch (error) {
    logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–µ—à—É:", error);
    
    // –ü–ª–∞–Ω—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω
    setTimeout(() => {
      logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–µ—à—É...");
      initializeCache();
    }, 5 * 60 * 1000);
  }
};

/**
 * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
 */
const createPaginationResponse = (products, page, limit, category = null) => {
  const pageNum = Math.max(1, parseInt(page));
  const limitNum = Math.max(1, Math.min(50, parseInt(limit))); // –ú–∞–∫—Å–∏–º—É–º 50
  const start = (pageNum - 1) * limitNum;
  const end = start + limitNum;

  const paginatedProducts = products.slice(start, end);
  const totalPages = Math.ceil(products.length / limitNum);
  const hasMore = end < products.length;

  return {
    success: true,
    products: paginatedProducts,
    pagination: {
      page: pageNum,
      limit: limitNum,
      totalPages,
      totalItems: products.length,
      hasMore,
      showing: `${start + 1}-${Math.min(end, products.length)} –∑ ${products.length}`
    },
    category: category,
    fromCache: true,
    cacheAge: cacheService.getCacheAge(),
    cacheStatus: cacheService.getCacheStatus()
  };
};

/**
 * –ì–û–õ–û–í–ù–ò–ô ENDPOINT: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∞–±–æ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
 */
export const getProducts = async (req, res) => {
  try {
    const { page = 1, limit = 8, category } = req.query;
    
    logger.info(`üîç –ó–∞–ø–∏—Ç —Ç–æ–≤–∞—Ä—ñ–≤: category=${category || '–≤—Å—ñ'}, page=${page}, limit=${limit}`);

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É —É —Ñ–æ–Ω—ñ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ (–Ω–µ —á–µ–∫–∞—î–º–æ)
    if (cacheService.shouldUpdateCache() && !cacheService.cache.products.isUpdating) {
      updateCacheInBackground();
    }

    let products;

    if (category && cacheService.categoryExists(category)) {
      // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
      products = cacheService.getCategoryProducts(category);
      logger.info(`üìÇ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ${category}: ${products.length}`);
    } else {
      // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
      products = cacheService.getAllProducts();
      logger.info(`üì¶ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –≤—Å—ñ –∫–µ—à–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏: ${products.length}`);
    }

    // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –∫–µ—à –Ω–µ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    if (products.length === 0 && !cacheService.cache.products.isUpdating) {
      return res.status(503).json({
        success: false,
        error: "–¢–æ–≤–∞—Ä–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
        isUpdating: cacheService.cache.products.isUpdating,
        cacheStatus: cacheService.getCacheStatus()
      });
    }

    // –Ø–∫—â–æ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î –∞–ª–µ –∫–µ—à –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è - —á–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏
    if (products.length === 0 && cacheService.cache.products.isUpdating) {
      await cacheService.waitForUpdate(10000); // –ß–µ–∫–∞—î–º–æ –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
      products = category ? cacheService.getCategoryProducts(category) : cacheService.getAllProducts();
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
    const response = createPaginationResponse(products, page, limit, category);
    
    logger.info(`üìä –ù–∞–¥—ñ—Å–ª–∞–Ω–æ ${response.products.length} —Ç–æ–≤–∞—Ä—ñ–≤ (${response.pagination.showing})`);
    
    res.json(response);

  } catch (error) {
    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ getProducts:", error);
    res.status(500).json({
      success: false,
      error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤",
      details: error.message
    });
  }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é (–æ–∫—Ä–µ–º–∏–π endpoint)
 */
export const getProductsByCategory = async (req, res) => {
  const { category } = req.params;
  
  logger.info(`üîç –ó–∞–ø–∏—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${category}`);

  if (!cacheService.categoryExists(category)) {
    return res.status(400).json({
      success: false,
      error: "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è",
      availableCategories: cacheService.getAvailableCategories()
    });
  }

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π endpoint
  req.query.category = category;
  return getProducts(req, res);
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑–∞ ID
 */
export const getProductById = async (req, res) => {
  try {
    const { id } = req.params;
    logger.info(`üîç –ó–∞–ø–∏—Ç —Ç–æ–≤–∞—Ä—É ID: ${id}`);

    // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ –∫–µ—à—ñ
    const cachedProduct = cacheService.findProductById(id);
    
    if (cachedProduct) {
      logger.info(`‚úÖ –¢–æ–≤–∞—Ä –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à—ñ: ${cachedProduct.name}`);
      return res.json({
        success: true,
        product: cachedProduct,
        fromCache: true
      });
    }

    // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à—ñ, –∑–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ API
    logger.info("üìû –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à—ñ, –∑–∞–ø–∏—Ç –¥–æ API");
    
    const product = await promService.fetchProductById(id);

    res.json({
      success: true,
      product: product,
      fromCache: false
    });

  } catch (error) {
    logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ${req.params.id}:`, error);
    
    if (error.message === "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ") {
      res.status(404).json({
        success: false,
        error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
      });
    } else {
      res.status(500).json({
        success: false,
        error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä",
        details: error.message
      });
    }
  }
};

/**
 * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
 */
export const testAPI = async (req, res) => {
  try {
    logger.info("üîç –ó–∞–ø–∏—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API");

    // –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Prom.ua API
    const apiTest = await promService.testConnection();
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–µ—à—É
    const cacheStatus = cacheService.getDetailedStats();
    
    res.json({
      success: true,
      api: apiTest,
      cache: cacheStatus,
      server: {
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API:", error);
    res.status(500).json({
      success: false,
      error: "–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API",
      details: error.message,
      cache: cacheService.getCacheStatus()
    });
  }
};

/**
 * –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π endpoint)
 */
export const refreshCache = async (req, res) => {
  try {
    logger.info("üîÑ –ó–∞–ø–∏—Ç –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É");
    
    if (cacheService.cache.products.isUpdating) {
      return res.status(409).json({
        success: false,
        error: "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è",
        isUpdating: true,
        cacheStatus: cacheService.getCacheStatus()
      });
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ —á–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    await updateCacheInBackground();
    
    const cacheStatus = cacheService.getCacheStatus();
    
    res.json({
      success: true,
      message: "–ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ",
      cache: cacheStatus
    });

  } catch (error) {
    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–µ—à",
      details: error.message,
      cache: cacheService.getCacheStatus()
    });
  }
};

/**
 * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π endpoint)
 */
export const clearCache = async (req, res) => {
  try {
    logger.info("üóëÔ∏è –ó–∞–ø–∏—Ç –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É");
    
    cacheService.clearCache();
    
    res.json({
      success: true,
      message: "–ö–µ—à –æ—á–∏—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ",
      cache: cacheService.getCacheStatus()
    });

  } catch (error) {
    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à",
      details: error.message
    });
  }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
 */
export const getProductsStats = async (req, res) => {
  try {
    const cacheStatus = cacheService.getCacheStatus();
    const allProducts = cacheService.getAllProducts();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    const categoryStats = {};
    Object.keys(cacheService.categoryGroups).forEach(category => {
      const products = cacheService.getCategoryProducts(category);
      categoryStats[category] = {
        count: products.length,
        groupId: cacheService.getCategoryGroupId(category)
      };
    });

    // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = {
      total: allProducts.length,
      categories: categoryStats,
      cache: cacheStatus,
      lastProduct: allProducts.length > 0 ? {
        id: allProducts[allProducts.length - 1].id,
        name: allProducts[allProducts.length - 1].name
      } : null
    };

    res.json({
      success: true,
      stats
    });

  } catch (error) {
    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
      details: error.message
    });
  }
};