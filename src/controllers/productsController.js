import axios from "axios";
import { config } from "../config/env.js";

// –ö–µ—à –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤
const cache = {
  allProducts: null,
  categorizedProducts: {},
  lastUpdated: null
};

const CACHE_DURATION = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω

// –ú–∞–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ —ó—Ö group_id (—Ü—ñ ID –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∑—è—Ç–∏ –∑ –≤–∞—à–æ–≥–æ Prom.ua)
const CATEGORY_GROUPS = {
  'solar-panels': 97668952,
  'inverters': 130134486,
  'fuses': null,
  'ups': null,
  'cables': 130135807,
  'optimizers': 130139474,
  'controllers': null,
  'mounting': 130139468,
  'batteries': 140995307,
  'drone-batteries': null,
  'charging-stations': null,
  'mushrooms': null,
  'boilers': null,
  'air-conditioners': 130300043
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ API –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
const fetchProducts = async (filter = null) => {
  let allProducts = [];
  let lastId = null;
  let hasMore = true;
  let requestCount = 0;
  const maxRequests = 50; // –ó–±—ñ–ª—å—à–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤
  
  console.log("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤");
  
  try {
    while (hasMore && requestCount < maxRequests) {
      requestCount++;
      console.log(`üìû –ó–∞–ø–∏—Ç #${requestCount}, lastId: ${lastId}`);
      
      const params = {
        limit: 500,
        ...(lastId && { last_id: lastId }),
      };
      
      const response = await axios.get(
        "https://my.prom.ua/api/v1/products/list",
        {
          headers: {
            Authorization: `Bearer ${config.promApiToken}`,
            "X-LANGUAGE": "uk",
          },
          params,
          timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        }
      );

      const { products, last_id } = response.data;
      
      console.log(`üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${products?.length || 0}`);
      console.log(`üîÑ –ù–æ–≤–∏–π last_id: ${last_id}`);
      
      if (products?.length > 0) {
        const filtered = filter ? products.filter(filter) : products;
        allProducts = [...allProducts, ...filtered];
        
        console.log(`‚úÖ –î–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${filtered.length}, –≤—Å—å–æ–≥–æ: ${allProducts.length}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
        if (!last_id) {
          console.log("‚ö†Ô∏è last_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è");
          hasMore = false;
        } else if (last_id === lastId) {
          console.log("‚ö†Ô∏è last_id –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è");
          hasMore = false;
        } else {
          lastId = last_id;
          
          // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–µ–Ω—à–µ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω—ñ–∂ –º–∞–∫—Å–∏–º—É–º, –º–æ–∂–ª–∏–≤–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Ç
          if (products.length < 500) {
            console.log(`‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –º–µ–Ω—à–µ —Ç–æ–≤–∞—Ä—ñ–≤ (${products.length}) –Ω—ñ–∂ –º–∞–∫—Å–∏–º—É–º (500)`);
          }
        }
        
      } else {
        console.log("‚ùå –¢–æ–≤–∞—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –º–∞—Å–∏–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è");
        hasMore = false;
      }

      // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API
      await new Promise(resolve => setTimeout(resolve, 150));
    }
    
    if (requestCount >= maxRequests) {
      console.log(`‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ (${maxRequests})`);
    }
    
    console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${allProducts.length}`);
    return allProducts;
    
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ:", error.message);
    if (error.response) {
      console.error("üìÑ –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", error.response.status);
      console.error("üìÑ –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", error.response.data);
    }
    throw error;
  }
};

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º offset (—è–∫—â–æ last_id –Ω–µ –ø—Ä–∞—Ü—é—î)
const fetchProductsWithOffset = async (filter = null) => {
  let allProducts = [];
  let offset = 0;
  let hasMore = true;
  const limit = 100; // –ú–µ–Ω—à–∏–π –ª—ñ–º—ñ—Ç –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
  let requestCount = 0;
  const maxRequests = 100;
  
  console.log("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ offset");
  
  try {
    while (hasMore && requestCount < maxRequests) {
      requestCount++;
      console.log(`üìû –ó–∞–ø–∏—Ç #${requestCount}, offset: ${offset}, limit: ${limit}`);
      
      const response = await axios.get(
        "https://my.prom.ua/api/v1/products/list",
        {
          headers: {
            Authorization: `Bearer ${config.promApiToken}`,
            "X-LANGUAGE": "uk",
          },
          params: {
            limit: limit,
            offset: offset
          },
          timeout: 30000,
        }
      );

      const { products } = response.data;
      
      console.log(`üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${products?.length || 0}`);
      
      if (products?.length > 0) {
        const filtered = filter ? products.filter(filter) : products;
        allProducts = [...allProducts, ...filtered];
        
        console.log(`‚úÖ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${allProducts.length}`);
        
        // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–µ–Ω—à–µ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω—ñ–∂ limit, –∑–Ω–∞—á–∏—Ç—å —Ü–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Ç
        if (products.length < limit) {
          hasMore = false;
          console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –º–µ–Ω—à–µ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω—ñ–∂ limit, –∑–∞–≤–µ—Ä—à—É—î–º–æ");
        } else {
          offset += limit;
        }
      } else {
        hasMore = false;
        console.log("‚ùå –¢–æ–≤–∞—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ, –∑–∞–≤–µ—Ä—à—É—î–º–æ");
      }

      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${allProducts.length}`);
    return allProducts;
    
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑ offset:", error.message);
    throw error;
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤
const categorizeProducts = (products) => {
  const categorized = {};
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  Object.keys(CATEGORY_GROUPS).forEach(category => {
    categorized[category] = [];
  });

  products.forEach(product => {
    const groupId = product.group?.id;
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ group_id
    const category = Object.entries(CATEGORY_GROUPS).find(
      ([key, id]) => id === groupId
    );
    
    if (category) {
      categorized[category[0]].push(product);
    }
  });

  return categorized;
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
export const getProducts = async (req, res) => {
  try {
    const { page = 1, limit = 8, category } = req.query;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
    const now = Date.now();
    if (!cache.allProducts || !cache.lastUpdated || 
        (now - cache.lastUpdated) > CACHE_DURATION) {
      console.log("üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à...");
      
      // –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, –ø–æ—Ç—ñ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É
      try {
        cache.allProducts = await fetchProducts();
      } catch (error) {
        console.log("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞, –ø—Ä–æ–±—É—î–º–æ –∑ offset...");
        cache.allProducts = await fetchProductsWithOffset();
      }
      
      cache.categorizedProducts = categorizeProducts(cache.allProducts);
      cache.lastUpdated = now;
      
      console.log(`‚úÖ –ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${cache.allProducts.length}`);
      
      // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º
      Object.entries(cache.categorizedProducts).forEach(([key, products]) => {
        if (products.length > 0) {
          console.log(`üìÇ ${key}: ${products.length} —Ç–æ–≤–∞—Ä—ñ–≤`);
        }
      });
    }

    let products;
    if (category && cache.categorizedProducts[category]) {
      products = cache.categorizedProducts[category];
    } else {
      products = cache.allProducts;
    }

    const pageNum = Math.max(1, parseInt(page));
    const limitNum = Math.max(1, parseInt(limit));
    const start = (pageNum - 1) * limitNum;
    const end = start + limitNum;

    res.json({
      success: true,
      products: products.slice(start, end),
      pagination: {
        page: pageNum,
        limit: limitNum,
        totalPages: Math.ceil(products.length / limitNum),
        totalItems: products.length,
        hasMore: end < products.length,
        showing: `${start + 1}-${Math.min(end, products.length)} –∑ ${products.length}`
      },
      fromCache: true,
      totalProductsInCache: cache.allProducts?.length || 0
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ getProducts:", error);
    res.status(500).json({
      success: false,
      error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –ø–æ ID
export const getProductById = async (req, res) => {
  try {
    const { id } = req.params;
    const response = await axios.get(
      `https://my.prom.ua/api/v1/products/${id}`,
      {
        headers: {
          Authorization: `Bearer ${config.promApiToken}`,
          "X-LANGUAGE": "uk",
        },
        timeout: 15000,
      }
    );
    res.json(response.data);
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ${req.params.id}:`, error.message);
    res.status(500).json({
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–≤–∞—Ä",
      details: error.message
    });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
export const getProductsByCategory = async (req, res) => {
  try {
    const { category } = req.params;
    const { page = 1, limit = 8 } = req.query;

    if (!CATEGORY_GROUPS.hasOwnProperty(category)) {
      return res.status(400).json({
        success: false,
        error: "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è"
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
    const now = Date.now();
    if (!cache.allProducts || !cache.lastUpdated || 
        (now - cache.lastUpdated) > CACHE_DURATION) {
      console.log("üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó...");
      
      try {
        cache.allProducts = await fetchProducts();
      } catch (error) {
        console.log("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞, –ø—Ä–æ–±—É—î–º–æ –∑ offset...");
        cache.allProducts = await fetchProductsWithOffset();
      }
      
      cache.categorizedProducts = categorizeProducts(cache.allProducts);
      cache.lastUpdated = now;
    }

    const products = cache.categorizedProducts[category] || [];
    const pageNum = Math.max(1, parseInt(page));
    const limitNum = Math.max(1, parseInt(limit));
    const start = (pageNum - 1) * limitNum;
    const end = start + limitNum;

    res.json({
      success: true,
      products: products.slice(start, end),
      pagination: {
        page: pageNum,
        limit: limitNum,
        totalPages: Math.ceil(products.length / limitNum),
        totalItems: products.length,
        hasMore: end < products.length,
        showing: `${start + 1}-${Math.min(end, products.length)} –∑ ${products.length}`
      },
      category: category,
      fromCache: true,
      totalProductsInCache: cache.allProducts?.length || 0
    });
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ${category}:`, error);
    res.status(500).json({
      success: false,
      error: `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ${category}`,
      details: error.message
    });
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É
export const refreshCache = async (req, res) => {
  try {
    console.log("üîÑ –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É...");
    
    // –°–ø—Ä–æ–±—É—î–º–æ –æ–±–∏–¥–≤–∞ –º–µ—Ç–æ–¥–∏
    try {
      cache.allProducts = await fetchProducts();
    } catch (error) {
      console.log("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞, –ø—Ä–æ–±—É—î–º–æ –∑ offset...");
      cache.allProducts = await fetchProductsWithOffset();
    }
    
    cache.categorizedProducts = categorizeProducts(cache.allProducts);
    cache.lastUpdated = Date.now();
    
    const categoryStats = Object.entries(cache.categorizedProducts).map(([key, products]) => ({
      category: key,
      count: products.length
    }));
    
    console.log(`‚úÖ –ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${cache.allProducts.length}`);
    
    res.json({
      success: true,
      totalCount: cache.allProducts.length,
      categories: categoryStats,
      lastUpdated: new Date(cache.lastUpdated).toISOString()
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–µ—à",
      details: error.message
    });
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É
export const getCacheStats = async (req, res) => {
  try {
    const categoryStats = Object.entries(cache.categorizedProducts || {}).map(([key, products]) => ({
      category: key,
      count: products.length
    }));
    
    res.json({
      success: true,
      cacheExists: !!cache.allProducts,
      totalProducts: cache.allProducts?.length || 0,
      lastUpdated: cache.lastUpdated ? new Date(cache.lastUpdated).toISOString() : null,
      cacheAge: cache.lastUpdated ? Date.now() - cache.lastUpdated : null,
      categories: categoryStats
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
      details: error.message
    });
  }
};