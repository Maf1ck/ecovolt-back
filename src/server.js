import express from "express";
import cors from "cors";
import helmet from "helmet";
import { config } from "./config/env.js";
import productsRouter from "./routes/products.js";
import { errorHandler, notFoundHandler } from "./middleware/errorHandler.js";
import { initializeCache } from "./controllers/productsController.js";
import logger from "./utils/logger.js";

const app = express();

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
app.use((req, res, next) => {
  const start = Date.now();

  res.on('finish', () => {
    const duration = Date.now() - start;
    const status = res.statusCode;
    const method = req.method;
    const url = req.originalUrl;
    const ip = req.ip || req.connection.remoteAddress;

    logger.info(`${method} ${url} ${status} ${duration}ms - ${ip}`);
  });

  next();
});

// –ë–µ–∑–ø–µ–∫–∞
app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        workerSrc: ["'self'", "blob:"],
        scriptSrc: ["'self'", "'unsafe-inline'", "blob:"],
        connectSrc: ["'self'", "*"],
      },
    },
    crossOriginEmbedderPolicy: false,
  })
);

// CORS –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['*'],
  credentials: false
}));

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
app.use((req, res, next) => {
  // –õ–æ–≥—É—î–º–æ CORS –∑–∞–ø–∏—Ç–∏
  logger.info(`üåê CORS –∑–∞–ø–∏—Ç: ${req.method} ${req.path} –∑ origin: ${req.headers.origin}`);
  
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', '*');
  
  if (req.method === 'OPTIONS') {
    logger.info(`‚úÖ CORS preflight –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è ${req.path}`);
    res.sendStatus(200);
  } else {
    next();
  }
});

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –ë–∞–∑–æ–≤–∏–π endpoint
app.get("/", (req, res) => {
  res.json({ 
    message: "EcoVolt API is running", 
    endpoints: {
      products: "/api/products",
      test: "/api/products/test",
      health: "/health",
      cors: "/cors-test",
      productsCount: "/products-count",
      cacheStats: "/cache-stats",
      refreshCache: "/refresh-cache (POST)",
      promStats: "/prom-stats"
    },
    cors: {
      origin: req.headers.origin,
      allowed: true
    }
  });
});

// –¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ CORS
app.get("/cors-test", (req, res) => {
  logger.info(`üß™ CORS —Ç–µ—Å—Ç –∑–∞–ø–∏—Ç: ${req.method} ${req.path} –∑ origin: ${req.headers.origin}`);
  
  res.json({
    success: true,
    message: "CORS —Ç–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ",
    origin: req.headers.origin,
    timestamp: new Date().toISOString(),
    cors: {
      allowOrigin: res.getHeader('Access-Control-Allow-Origin'),
      allowMethods: res.getHeader('Access-Control-Allow-Methods'),
      allowHeaders: res.getHeader('Access-Control-Allow-Headers')
    }
  });
});

// –¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤
app.get("/products-count", async (req, res) => {
  try {
    const cacheServiceModule = await import('./services/cacheService.js');
    const cacheService = cacheServiceModule.default;
    const products = cacheService.getAllProducts();
    
    res.json({
      success: true,
      totalProducts: products.length,
      message: `–í –∫–µ—à—ñ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è ${products.length} —Ç–æ–≤–∞—Ä—ñ–≤`,
      timestamp: new Date().toISOString(),
      cacheStatus: "active"
    });
  } catch (error) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤",
      details: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É
app.post("/refresh-cache", async (req, res) => {
  try {
    logger.info("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É");
    
    const { updateCacheInBackground } = await import('./controllers/productsController.js');
    await updateCacheInBackground();
    
    const cacheServiceModule = await import('./services/cacheService.js');
    const cacheService = cacheServiceModule.default;
    const products = cacheService.getAllProducts();
    
    res.json({
      success: true,
      message: "–ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ",
      totalProducts: products.length,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–µ—à—É:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–µ—à",
      details: error.message
    });
  }
});

// Endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É
app.get("/cache-stats", async (req, res) => {
  try {
    const cacheServiceModule = await import('./services/cacheService.js');
    const cacheService = cacheServiceModule.default;
    const allProducts = cacheService.getAllProducts();
    const cacheStatus = cacheService.getCacheStatus();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    const categoryStats = {};
    Object.keys(cacheService.categoryGroups).forEach(category => {
      const products = cacheService.getCategoryProducts(category);
      if (products.length > 0) {
        categoryStats[category] = products.length;
      }
    });
    
    res.json({
      success: true,
      totalProducts: allProducts.length,
      categories: categoryStats,
      cacheStatus: cacheStatus,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É",
      details: error.message
    });
  }
});
// Endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É
app.get("/cache-stats", async (req, res) => {
  try {
    const cacheServiceModule = await import('./services/cacheService.js');
    const cacheService = cacheServiceModule.default;
    const allProducts = cacheService.getAllProducts();
    const cacheStatus = cacheService.getCacheStatus();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    const categoryStats = {};
    Object.keys(cacheService.categoryGroups).forEach(category => {
      const products = cacheService.getCategoryProducts(category);
      if (products.length > 0) {
        categoryStats[category] = products.length;
      }
    });
    
    res.json({
      success: true,
      totalProducts: allProducts.length,
      categories: categoryStats,
      cacheStatus: cacheStatus,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É",
      details: error.message
    });
  }
});


// Endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É
app.get("/cache-stats", async (req, res) => {
  try {
    const cacheServiceModule = await import('./services/cacheService.js');
    const cacheService = cacheServiceModule.default;
    const allProducts = cacheService.getAllProducts();
    const cacheStatus = cacheService.getCacheStatus();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    const categoryStats = {};
    Object.keys(cacheService.categoryGroups).forEach(category => {
      const products = cacheService.getCategoryProducts(category);
      if (products.length > 0) {
        categoryStats[category] = products.length;
      }
    });
    
    res.json({
      success: true,
      totalProducts: allProducts.length,
      categories: categoryStats,
      cacheStatus: cacheStatus,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É",
      details: error.message
    });
  }
});

// Endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Prom.ua –ø—Ä–æ—Ñ—ñ–ª—é
app.get("/prom-stats", async (req, res) => {
  try {
    logger.info("üîç –ó–∞–ø–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Prom.ua –ø—Ä–æ—Ñ—ñ–ª—é");
    
    const { promService } = await import('./services/promService.js');
    
    // –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API
    const connectionTest = await promService.testConnection();
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API
    const apiStats = await promService.getAPIStats();
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–æ —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤
    let totalProductsInProfile = 0;
    try {
      // –†–æ–±–∏–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
      const testResponse = await promService.createClient().get('/products/list', {
        params: { limit: 1 }
      });
      
      // –Ø–∫—â–æ API –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
      if (testResponse.data.total) {
        totalProductsInProfile = testResponse.data.total;
      }
    } catch (error) {
      logger.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤:", error.message);
    }
    
    res.json({
      success: true,
      message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Prom.ua –ø—Ä–æ—Ñ—ñ–ª—é",
      connection: connectionTest,
      apiStats: apiStats,
      profileInfo: {
        estimatedTotalProducts: totalProductsInProfile || "–ù–µ–≤—ñ–¥–æ–º–æ",
        note: "–¶–µ –ø—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞. –¢–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–∂–µ –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è."
      },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Prom.ua:", error);
    res.status(500).json({
      success: false,
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Prom.ua",
      details: error.message
    });
  }
});
// –ë–∞–∑–æ–≤–∏–π health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development',
    cors: {
      origin: req.headers.origin,
      userAgent: req.headers['user-agent']
    }
  });
});

// API –º–∞—Ä—à—Ä—É—Ç–∏
app.use("/api/products", productsRouter);

// –û–±—Ä–æ–±–∫–∞ –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
app.use(notFoundHandler);

// –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
app.use(errorHandler);

// Graceful shutdown
const gracefulShutdown = (signal) => {
  logger.info(`–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª ${signal}. –í–∏–∫–æ–Ω—É—î–º–æ graceful shutdown...`);
  process.exit(0);
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ EcoVolt...");

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–µ—à
    await initializeCache();

    const server = app.listen(config.port, '0.0.0.0', () => {
      logger.info(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
      logger.info(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
      logger.info(`üìä Health check: http://localhost:${config.port}/health`);
      logger.info(`üõ†Ô∏è API test: http://localhost:${config.port}/api/products/test`);
    });

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–∞—É—Ç—ñ–≤
    server.timeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
    server.keepAliveTimeout = 61000; // 61 —Å–µ–∫—É–Ω–¥–∞
    server.headersTimeout = 62000; // 62 —Å–µ–∫—É–Ω–¥–∏

  } catch (error) {
    logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:", error);
    process.exit(1);
  }
};

startServer();