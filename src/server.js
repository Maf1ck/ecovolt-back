import express from "express";
import cors from "cors";
import helmet from "helmet";
import { config } from "./config/env.js";
import productsRouter from "./routes/products.js";
import { errorHandler, notFoundHandler } from "./middleware/errorHandler.js";
import { initializeCache } from "./controllers/productsController.js";
import logger from "./utils/logger.js";

const app = express();

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
app.use((req, res, next) => {
  const start = Date.now();
  
  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
  res.on('finish', () => {
    const duration = Date.now() - start;
    const status = res.statusCode;
    const method = req.method;
    const url = req.originalUrl;
    const ip = req.ip;
    
    logger.info(`${method} ${url} ${status} ${duration}ms - ${ip}`);
  });
  
  next();
});

// –ë–µ–∑–ø–µ–∫–∞
app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        workerSrc: ["'self'", "blob:"],
        scriptSrc: ["'self'", "'unsafe-inline'", "blob:"],
        connectSrc: ["'self'", "*"],
      },
    },
  })
);

// CORS –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://your-frontend-domain.com'] // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
    : true, // –í dev —Ä–µ–∂–∏–º—ñ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤—Å—ñ origins
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –ë–∞–∑–æ–≤–∏–π health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// API –º–∞—Ä—à—Ä—É—Ç–∏
app.use("/api/products", productsRouter);

// –û–±—Ä–æ–±–∫–∞ –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
app.use('*', notFoundHandler);

// –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ (–º–∞—î –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ—é)
app.use(errorHandler);

// Graceful shutdown
const gracefulShutdown = (signal) => {
  logger.info(`–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª ${signal}. –í–∏–∫–æ–Ω—É—î–º–æ graceful shutdown...`);
  
  process.exit(0);
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// –û–±—Ä–æ–±–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ EcoVolt...");
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–µ—à –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    await initializeCache();
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä
    app.listen(config.port, () => {
      logger.info(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
      logger.info(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
      logger.info(`üìä Health check: http://localhost:${config.port}/health`);
      logger.info(`üõ†Ô∏è API test: http://localhost:${config.port}/api/products/test`);
    });
    
  } catch (error) {
    logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:", error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
startServer();